const e=JSON.parse('{"key":"v-3c20c2a0","path":"/notes/java/jvm/Java%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. 类加载检查。执行一个 new 指令时，首先去检查这个指令的参数是否能在元空间的运行时常量池中定位这个累的的符号引用，并且检查这个符号引用代表的类是否已经被加载过、解析过、初始化过。如果没有，则先执行类的加载过程。 2. 分配内存。类加载检查通过后，则为新生对象进行分配内存。分配方式有「指针碰撞」和「空闲列表」两种方式： 1. 指针碰撞 1. 适用...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/code-notes/notes/java/jvm/Java%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"code notes"}],["meta",{"property":"og:description","content":"1. 类加载检查。执行一个 new 指令时，首先去检查这个指令的参数是否能在元空间的运行时常量池中定位这个累的的符号引用，并且检查这个符号引用代表的类是否已经被加载过、解析过、初始化过。如果没有，则先执行类的加载过程。 2. 分配内存。类加载检查通过后，则为新生对象进行分配内存。分配方式有「指针碰撞」和「空闲列表」两种方式： 1. 指针碰撞 1. 适用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-20T18:35:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2023-11-20T18:35:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-20T18:35:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1700505313000,"updatedTime":1700505313000,"contributors":[{"name":"peng1996","email":"33412356+peng1996@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.56,"words":468},"filePathRelative":"notes/java/jvm/Java 对象的创建过程.md","localizedDate":"2023年11月20日","autoDesc":true}');export{e as data};
