const e=JSON.parse('{"key":"v-16ea206a","path":"/notes/java/concurrent/%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","title":"","lang":"zh-CN","frontmatter":{"description":"CPU 上下文切换 即使是单核处理器也支持多线程执行代码，CPU 通过给每个线程分配 CPU 时间片来实现这个机制。时间片是 CPU 分配给各个线程的时间，因为时间片非常短，所以 CPU 通过不停地切换线程执行，让我们感觉多个线程是同时执行的，时间片一般是几十毫秒 (ms)。 CPU 通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/code-notes/notes/java/concurrent/%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"code notes"}],["meta",{"property":"og:description","content":"CPU 上下文切换 即使是单核处理器也支持多线程执行代码，CPU 通过给每个线程分配 CPU 时间片来实现这个机制。时间片是 CPU 分配给各个线程的时间，因为时间片非常短，所以 CPU 通过不停地切换线程执行，让我们感觉多个线程是同时执行的，时间片一般是几十毫秒 (ms)。 CPU 通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-20T18:35:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2023-11-20T18:35:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-20T18:35:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"CPU 上下文切换","slug":"cpu-上下文切换","link":"#cpu-上下文切换","children":[]},{"level":2,"title":"volatile","slug":"volatile","link":"#volatile","children":[]},{"level":2,"title":"synchronized","slug":"synchronized","link":"#synchronized","children":[{"level":3,"title":"锁升级","slug":"锁升级","link":"#锁升级","children":[]}]}],"git":{"createdTime":1700505313000,"updatedTime":1700505313000,"contributors":[{"name":"peng1996","email":"33412356+peng1996@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.12,"words":337},"filePathRelative":"notes/java/concurrent/并发机制底层实现原理.md","localizedDate":"2023年11月20日","autoDesc":true}');export{e as data};
